#!/usr/bin/env perl
use strict;
use warnings;

use Data::Dumper;

my @packages = split (/\n/, `ls plugins`);

mkdir 'temp';
mkdir 'temp/output';
mkdir 'temp/output/web';

my $fname = 'temp/output/web/plugins-content.html';

open F,">$fname" || die "Failed to open $fname\n";

print F "<table><tr><th>Name</th><th>Revision</th><th>Download</th><th>Description</th></tr>\n";

foreach (@packages) {
    my %conf = ();
    my $package = $_;
    my $descr_fname = "temp/output/i686/$package.descr";
    if (-e $descr_fname) {
        local $/;
        open CONF,"<$descr_fname" || die "Failed to open $descr_fname\n";
        my %i686_conf = parse_config (<CONF>);
        close CONF;
        map ({$conf{$_} = $i686_conf{$_}} keys %i686_conf);
    }
    $descr_fname = "temp/output/x86_64/$package.descr";
    if (-e $descr_fname) {
        local $/;
        open CONF,"<$descr_fname" || die "Failed to open $descr_fname\n";
        my %x86_64_conf = parse_config (<CONF>);
        close CONF;
        map ({$conf{$_} = $x86_64_conf{$_}} keys %x86_64_conf);
    }

    if (exists $conf{name}) {
        print "reading $conf{name}\n";
        my $descr = $conf{descr};
        if (!$descr) {
            print "null descr!\n";
            print Dumper(\%conf)."\n";
            next;
        }
        $descr =~ s/\n/<br\/>/g;

        my $links = '';
        if ($conf{fname_i686}) {
            $links .= "<a href='http://sourceforge.net/projects/deadbeef/files/plugins/i686/$conf{fname_i686}/download'>i686</a>";
        }
        if ($conf{fname_x86_64}) {
            if ($conf{fname_i686}) {
                $links .= '<br/>';
            }
            $links .= "<a href='http://sourceforge.net/projects/deadbeef/files/plugins/x86_64/$conf{fname_x86_64}/download'>x86_64</a>";
        }

        print F "<tr><td valign='top'>$conf{name}</td><td valign='top'>$conf{revision}</td><td valign='top'> $links</td><td valign='top'>$descr<br/>[<a href=\"$conf{website}\">Author's website</a>]</td></tr>\n";
    }
    else {
        print STDERR "skipping plugin $package (bad .descr)\n";
    }
}

print F "</table>\n";

close F;

sub parse_config {
    $_ = shift;
    s/\\"/&quot;/g;
    my %out;
    while (/([a-z_0-9]*)="([^"]*)"\n/g) {
        my $key = $1;
        my $val = $2;
        $val =~ s/&quot;/"/g;
        $out{$key} = $val;
    }
    return %out;
}
